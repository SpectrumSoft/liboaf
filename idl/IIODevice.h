/**
 * @file
 * @brief Доступ к устройствам ввода/вывода
 * @author Sergey N. Yatskevich <syatskevich@gmail.com>
 * @copyright SpectrumSoft. All rights reserved. This file is part of liboaf,
 *            distributed under the GNU GPL v2 with a Linking Exception. For
 *            full terms see the included COPYING file.
 */
#ifndef __IIO_DEVICE_H
#define __IIO_DEVICE_H

#include <QtCore>

#include <idl/IInterface.h>
#include <idl/IUnknown.h>

namespace OAF
{
	/**
	 * @brief Интерфейс доступа к устройству ввода/вывода
	 *
	 * @todo Реализация интерфейса асинхронного ввода/вывода
	 */
	struct IIODevice : virtual public OAF::IInterface
	{
		/**
		 * @brief Вид информации об устройстве
		 */
		enum DeviceInfo
		{
			/**
			 * @brief Полный путь к устройству в нормализованном виде (QString)
			 *
			 * Значение данного параметра должно использоваться компонентами для контроля
			 * уже загруженных данных. То есть, если в разных местах приложения открываются
			 * одни и те же данные (данные идентифицируются одним и тем же путём), то в
			 * программе должна сущестовать только одна копия соответствующих данных, разделяемая
			 * между всеми её частями.
			 *
			 * Такое поведение должно реализовываться по умолчанию. Однако в ряде случаев бывает
			 * необходимо принудительно открыть несколько копий одних и тех же данных. В этом
			 * случае к URL данных должен быть добавлен параметр oaf_as_copy=yes. При задании
			 * такого параметра для файла данных будет сформирован URL, к которому будет добавлен
			 * параметр oaf_copy_id={uuid}. В дальнейшем можно открывать данный URL и он будет
			 * автоматически связан с исходным файлом. Если будут открыты несколько URL с одним
			 * и тем же oaf_copy_id, то они будут связаны с одними и теми же данными.
			 */
			PATH,

			/**
			 * @brief Идентификатор устройства (QString)
			 *
			 * Данный идентификатор идентифицирует данные в устройстве. Как правило реализуется как
			 * SHA1-сумма от потока данных.
			 */
			IDENTITY,

			/**
			 * @brief MIME-типы, ассоцированные с устройством в порядке увеличения общности (QStringList)
			 *
			 * Например приложение может хранить свои данные в формате XML, тогда ассоциированные
			 * с таким файлом MIME-типы будут:
			 *     # application/x-<наименование приложения>;
			 *     # text/xml;
			 *     # text/plain.
			 *
			 * Так как данный файл является одновременно и файлом приложения и XML файлом и текстовым
			 * файлом.
			 */
			CONTENT_TYPE,

			/**
			  * @brief Дата последнего изменения файла
			  *
			  * Для файла в памяти (raw) это будет невалидная пустая дата, для git - дата создания коммита,
			  * и только для собственно файла на диске это будет действительно дата изменения
			  */
			LAST_MODIFIED
		};

		/**
		 * @brief Информация об устройстве ввода/вывода
		 */
		virtual QVariant getInfo (DeviceInfo _what) = 0;

		/**
		 * @brief Задать параметры устройства ввода/вывода
		 *
		 * Позволяет задавать только DeviceInfo::PATH
		 */
		virtual void setInfo (DeviceInfo _what, const QVariant& _v) = 0;

		/**
		 * @brief Устройство ввода/вывода
		 *
		 * @return указатель на устройство ввода/вывода
		 *
		 * @attention
		 * IDL-IOD-001. Устройством ввода/вывода должен владеть объект, реализующий данный интерфейс и
		 * удалить его после использования.
		 *
		 * @attention
		 * IDL-IOD-002. При создании объекта, реализующего данный интерфейс, устройство не должно
		 * открываться, так как предполагается, что клиент сам откроет устройство в нужном ему
		 * режиме.
		 *
		 * @attention
		 * IDL-IOD-006. Пользователь QIODevice, вовращаемого данным интерфейсом может получить
		 * доступ к данному интерфейсу воспользовавшись методом QIODevice::parent () и запросив
		 * у полученного QObject интерфейс OAF::IIODevice.
		 */
		virtual QIODevice* device () = 0;

		/**
		 * @brief Проверяет существование объекта по пути getInfo (PATH)
		 */
		virtual bool exists () const = 0;
	};

	/**
	 * @brief Интерфейс расширения доступа к устройствам ввода/вывода
	 */
	struct IIODeviceExtender : virtual public OAF::IInterface
	{
		/**
		 * @brief Задание расширения устройства ввода/вывода
		 *
		 * @attention
		 * IDL-IOD-004. Клиент данного интерфейса должен иметь в виду, что в качестве результата
		 * вызова этого метода ему может вернуться ссылка на другой объект, который он и должен
		 * будет использовать.
		 *
		 * @attention
		 * IDL-IOD-005. Помимо списка интерфейсов, которые поддерживает OAF-класс, реализующий
		 * интерфейс IIODeviceExtender для него должен быть задан атрибут mime_types типа stringv,
		 * в котором перечислены все MIME-типы, которые данный класс может обрабатывать.
		 *
		 * MIME-тип определяет формат данных, получаемых и сохраняемых в устройстве.
		 *
		 * @return Объект, связанный с заданным устройством
		 */
		virtual OAF::URef<OAF::IUnknown> setIODevice (OAF::IIODevice* _io) = 0;
	};
}

#endif /* __IIO_DEVICE_H */
